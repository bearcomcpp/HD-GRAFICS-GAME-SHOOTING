#SHADERS
cpp
cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cryptopp/aes.h>
#include <cryptopp/modes.h>
#include <cryptopp/filters.h>
#include <cryptopp/hex.h>
#include <cryptopp/sha.h>

using namespace std;
using namespace CryptoPP;

// Function to generate a random key
string generateKey() {
    byte key[32]; // 256-bit key
    AutoSeededRandomPool prng;
    prng.GenerateBlock(key, 32);
    HexEncoder encoder;
    string keyStr;
    encoder.Attach(new StringSink(keyStr));
    encoder.Put(key, 32);
    encoder.MessageEnd();
    return keyStr;
}

// Function to encrypt a file
void encryptFile(string filename, string password) {
    // Generate a random key
    string key = generateKey();

    // Derive a key from the password using PBKDF2
    byte derivedKey[32];
    PKCS5_PBKDF2_HMAC<SHA256> pbkdf2;
    pbkdf2.DeriveKey(derivedKey, sizeof(derivedKey), (byte*)password.c_str(), password.length(), (byte*)"salt", 4, 1000);

    // Create an AES-256-CBC encryptor
    AES_CBC_Mode_ExternalCipher encryptor(derivedKey, sizeof(derivedKey), (byte*)key.c_str(), key.length());

    // Open the file in read mode
    ifstream file(filename, ios::binary);
    if (!file) {
        cout << "Error: Unable to open file." << endl;
        return;
    }

    // Read the file contents
    file.seekg(0, ios::end);
    int fileSize = file.tellg();
    vector<byte> fileBuffer(fileSize);
    file.seekg(0, ios::beg);
    file.read((char*)fileBuffer.data(), fileSize);
    file.close();

    // Encrypt the file contents
    StringSource(fileBuffer.data(), fileSize, true, new StreamTransformationFilter(encryptor, new HexEncoder(new StringSink(keyStr))));

    // Write the encrypted contents to a new file
    ofstream encryptedFile(filename + ".locked", ios::binary);
    encryptedFile.write((char*)fileBuffer.data(), fileSize);
    encryptedFile.close();

    // Remove the original file
    if (remove(filename.c_str()) != 0) {
        cout << "Error: Unable to delete original file." << endl;
    }

    cout << "File locked successfully." << endl;
}

// Function to decrypt a file
void decryptFile(string filename, string password) {
    // Open the locked file in read mode
    ifstream encryptedFile(filename, ios::binary);
    if (!encryptedFile) {
        cout << "Error: Unable to open locked file." << endl;
        return;
    }

    // Read the encrypted file contents
    encryptedFile.seekg(0, ios::end);
    int fileSize = encryptedFile.tellg();
    vector<byte> fileBuffer(fileSize);
    encryptedFile.seekg(0, ios::beg);
    encryptedFile.read((char*)fileBuffer.data(), fileSize);
    encryptedFile.close();

    // Derive a key from the password using PBKDF2
    byte derivedKey[32];
    PKCS5_PBKDF2_HMAC<SHA256> pbkdf2;
    pbkdf2.DeriveKey(derivedKey, sizeof(derivedKey), (byte*)password.c_str(), password.length(), (byte*)"salt", 4, 1000);

    // Create an AES-256-CBC decryptor
    AES_CBC_Mode_ExternalCipher decryptor(derivedKey, sizeof(derivedKey), (byte*)key.c_str(), key.length());

    // Decrypt the file contents
    StringSource(fileBuffer.data(), fileSize, true, new StreamTransformationFilter(decryptor, new HexDecoder(new StringSink(keyStr))));

    // Write the decrypted contents to a new file
    ofstream decryptedFile(filename.substr(0, filename.length() - 6), ios::binary);
    decryptedFile.write((char*)fileBuffer.data(), fileSize);
    decryptedFile.close();

    // Remove the locked file
    if (remove(filename.c_str()) != 0) {
        cout << "Error: Unable to delete locked file." << endl;
    }

    cout << "File unlocked successfully." << endl;
}

int main() {
    string filename, password;

    cout << "Enter the filename to lock: ";
    cin >> filename;

    cout << "Enter the password: ";
    cin >> password;

    encryptFile(filename, password);

    cout << "Enter the filename to unlock (including .locked extension): ";
    cin >> filename;

#version 330 core

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;
    TexCoords = aTexCoords;
    
    gl_Position = projection * view * vec4(FragPos, 1.0);
}

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

// Function to read shader source code from file
std::string readShaderSource(const std::string& filePath) {
    std::ifstream file(filePath);
    std::stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

// Function to compile shader
GLuint compileShader(GLenum type, const std::string& source) {
    GLuint shader = glCreateShader(type);
    const char* src = source.c_str();
    glShaderSource(shader, 1, &src, nullptr);
    glCompileShader(shader);

    int success;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
    if (!success) {
        char infoLog[512];
        glGetShaderInfoLog(shader, 512, nullptr, infoLog);
        std::cerr << "ERROR::SHADER::COMPILATION_FAILED\n" << infoLog << std::endl;
    }

    return shader;
}

// Function to create shader program
GLuint createShaderProgram(const std::string& vertexSource, const std::string& fragmentSource) {
    GLuint vertexShader = compileShader(GL_VERTEX_SHADER, vertexSource);
    GLuint fragmentShader = compileShader(GL_FRAGMENT_SHADER, fragmentSource);

    GLuint program = glCreateProgram();
    glAttachShader(program, vertexShader);
    glAttachShader(program, fragmentShader);
    glLinkProgram(program);

    int success;
    glGetProgramiv(program, GL_LINK_STATUS, &success);
    if (!success) {
        char infoLog[512];
        glGetProgramInfoLog(program, 512, nullptr, infoLog);
        std::cerr << "ERROR::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }

    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    return program;
}

int main() {
    // Initialize GLFW
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return -1;
    }

    // Create a windowed mode window and its OpenGL context
    GLFWwindow* window = glfwCreateWindow(800, 600, "HD Shooting Game", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }

    // Make the window's context current
    glfwMakeContextCurrent(window);

    // Load OpenGL functions using GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // Set viewport
    glViewport(0, 0, 800, 600);

    // Read shader sources
    std::string vertexSource = readShaderSource("vertex_shader.glsl");
    std::string fragmentSource = readShaderSource("fragment_shader.glsl");

    // Create shader program
    GLuint shaderProgram = createShaderProgram(vertexSource, fragmentSource);

    // Define vertices and indices for a cube
    float vertices[] = {
        // positions          // normals           // texture coords
        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
         0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
         0.5f,  

cpp
cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cryptopp/aes.h>
#include <cryptopp/modes.h>
#include <cryptopp/filters.h>
#include <cryptopp/hex.h>
#include <cryptopp/sha.h>

using namespace std;
using namespace CryptoPP;

// Function to generate a random key
string generateKey() {
    byte key[32]; // 256-bit key
    AutoSeededRandomPool prng;
    prng.GenerateBlock(key, 32);
    HexEncoder encoder;
    string keyStr;
    encoder.Attach(new StringSink(keyStr));
    encoder.Put(key, 32);
    encoder.MessageEnd();
    return keyStr;
}

// Function to encrypt a file
void encryptFile(string filename, string password) {
    // Generate a random key
    string key = generateKey();

    // Derive a key from the password using PBKDF2
    byte derivedKey[32];
    PKCS5_PBKDF2_HMAC<SHA256> pbkdf2;
    pbkdf2.DeriveKey(derivedKey, sizeof(derivedKey), (byte*)password.c_str(), password.length(), (byte*)"salt", 4, 1000);

    // Create an AES-256-CBC encryptor
    AES_CBC_Mode_ExternalCipher encryptor(derivedKey, sizeof(derivedKey), (byte*)key.c_str(), key.length());

    // Open the file in read mode
    ifstream file(filename, ios::binary);
    if (!file) {
        cout << "Error: Unable to open file." << endl;
        return;
    }

    // Read the file contents
    file.seekg(0, ios::end);
    int fileSize = file.tellg();
    vector<byte> fileBuffer(fileSize);
    file.seekg(0, ios::beg);
    file.read((char*)fileBuffer.data(), fileSize);
    file.close();

    // Encrypt the file contents
    StringSource(fileBuffer.data(), fileSize, true, new StreamTransformationFilter(encryptor, new HexEncoder(new StringSink(keyStr))));

    // Write the encrypted contents to a new file
    ofstream encryptedFile(filename + ".locked", ios::binary);
    encryptedFile.write((char*)fileBuffer.data(), fileSize);
    encryptedFile.close();

    // Remove the original file
    if (remove(filename.c_str()) != 0) {
        cout << "Error: Unable to delete original file." << endl;
    }

    cout << "File locked successfully." << endl;
}

// Function to decrypt a file
void decryptFile(string filename, string password) {
    // Open the locked file in read mode
    ifstream encryptedFile(filename, ios::binary);
    if (!encryptedFile) {
        cout << "Error: Unable to open locked file." << endl;
        return;
    }

    // Read the encrypted file contents
    encryptedFile.seekg(0, ios::end);
    int fileSize = encryptedFile.tellg();
    vector<byte> fileBuffer(fileSize);
    encryptedFile.seekg(0, ios::beg);
    encryptedFile.read((char*)fileBuffer.data(), fileSize);
    encryptedFile.close();

    // Derive a key from the password using PBKDF2
    byte derivedKey[32];
    PKCS5_PBKDF2_HMAC<SHA256> pbkdf2;
    pbkdf2.DeriveKey(derivedKey, sizeof(derivedKey), (byte*)password.c_str(), password.length(), (byte*)"salt", 4, 1000);

    // Create an AES-256-CBC decryptor
    AES_CBC_Mode_ExternalCipher decryptor(derivedKey, sizeof(derivedKey), (byte*)key.c_str(), key.length());

    // Decrypt the file contents
    StringSource(fileBuffer.data(), fileSize, true, new StreamTransformationFilter(decryptor, new HexDecoder(new StringSink(keyStr))));

    // Write the decrypted contents to a new file
    ofstream decryptedFile(filename.substr(0, filename.length() - 6), ios::binary);
    decryptedFile.write((char*)fileBuffer.data(), fileSize);
    decryptedFile.close();

    // Remove the locked file
    if (remove(filename.c_str()) != 0) {
        cout << "Error: Unable to delete locked file." << endl;
    }

    cout << "File unlocked successfully." << endl;
}

int main() {
    string filename, password;

    cout << "Enter the filename to lock: ";
    cin >> filename;

    cout << "Enter the password: ";
    cin >> password;

    encryptFile(filename, password);

    cout << "Enter the filename to unlock (including .locked extension): ";
    cin >> filename;

#version 330 core

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;
    TexCoords = aTexCoords;
    
    gl_Position = projection * view * vec4(FragPos, 1.0);
}

#version 330 core

out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform sampler2D texture_diffuse1;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
    // Ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
    
    // Diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
    
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = texture(texture_diffuse1, TexCoords) * vec4(result, 1.0);
}

#ifndef SHADER_H
#define SHADER_H

#include <glad/glad.h>
#include <glm/glm.hpp>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>

class Shader
{
public:
    unsigned int ID;

    Shader(const char* vertexPath, const char* fragmentPath)
    {
        std::string vertexCode;
        std::string fragmentCode;
        std::ifstream vShaderFile;
        std::ifstream fShaderFile;

        vShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
        fShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
        try
        {
            vShaderFile.open(vertexPath);
            fShaderFile.open(fragmentPath);
            std::stringstream vShaderStream, fShaderStream;

            vShaderStream << vShaderFile.rdbuf();
            fShaderStream << fShaderFile.rdbuf();

            vShaderFile.close();
            fShaderFile.close();

            vertexCode = vShaderStream.str();
            fragmentCode = fShaderStream.str();
        }
        catch (std::ifstream::failure& e)
        {
            std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
        }
        const char* vShaderCode = vertexCode.c_str();
        const char* fShaderCode = fragmentCode.c_str();

        unsigned int vertex, fragment;
        int success;
        char infoLog[512];

        vertex = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(vertex, 1, &vShaderCode, NULL);
        glCompileShader(vertex);
        glGetShaderiv(vertex, GL_COMPILE_STATUS, &success);
        if (!success)
        {
            glGetShaderInfoLog(vertex, 512, NULL, infoLog);
            std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
        }

        fragment = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(fragment, 1, &fShaderCode, NULL);
        glCompileShader(fragment);
        glGetShaderiv(fragment, GL_COMPILE_STATUS, &success);
        if (!success)
        {
            glGetShaderInfoLog(fragment, 512, NULL, infoLog);
            std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
        }

        ID = glCreateProgram();
        glAttachShader(ID, vertex);
        glAttachShader(ID, fragment);
        glLinkProgram(ID);
        glGetProgramiv(ID, GL_LINK_STATUS, &success);
        if (!success)
        {
            glGetProgramInfoLog(ID, 512, NULL, infoLog);
            std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
        }

        glDeleteShader(vertex);
        glDeleteShader(fragment);
    }

    void use()
    {
        glUseProgram(ID);
    }

    void setBool(const std::string& name, bool value) const
    {
        glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value);
    }

    void setInt(const std::string& name, int value) const
    {
        glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
    }

    void setFloat(const std::string& name, float value) const
    {
        glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
    }

    void setVec3(const std::string& name, const glm::vec3& value) const
    {
        glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
    }

    void setMat4(const std::string& name, const glm::mat4& mat) const
    {
        glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
    }
};

#endif

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include "Shader.h"
#include <iostream>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

int main()
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "HD Shooting Game", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    Shader ourShader("vertex_shader.glsl", "fragment_shader.glsl");

    float vertices[] = {
        // positions          // normals           // texture coords
         -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
          0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
          0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
          0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
         -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,
         -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,

         // other faces...
    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    while (!glfwWindowShouldClose(window))
    {
        processInput(window);

        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        ourShader.use();

        glm::mat4 model = glm::mat4(1.0f);
        glm::mat4 view = glm::mat4(1.0f);
        glm::mat4 projection = glm::mat4(1.0f);
        view = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));
        projection = glm::perspective(glm::radians(45.0f), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);

        ourShader.setMat4("model", model);
        ourShader.setMat4("view", view);
        ourShader.setMat4("projection", projection);

        glBindVertexArray(VAO);
        glDrawArrays(GL_TRIANGLES, 0, 36);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

    glfwTerminate();
    return 0;
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

